@use "sass:map";

// Generate utility classes for main colors
@mixin generateMainColorClasses($colors) {
  @each $colorName, $shades in $colors {
    @each $shade, $value in $shades {
      .bg-#{$colorName}-#{$shade} {
        background-color: #{$value} !important;
      }

      .text-#{$colorName}-#{$shade} {
        color: #{$value} !important;
      }

      .decoration-#{$colorName}-#{$shade} {
        text-decoration-color: #{$value} !important;
      }

      .border-#{$colorName}-#{$shade} {
        border-color: #{$value} !important;
      }

      .outline-#{$colorName}-#{$shade} {
        outline-color: #{$value} !important;
      }

      .accent-#{$colorName}-#{$shade} {
        accent-color: #{$value} !important;
      }

      .caret-#{$colorName}-#{$shade} {
        caret-color: #{$value} !important;
      }

      .fill-#{$colorName}-#{$shade} {
        fill: #{$value} !important;
      }

      .stroke-#{$colorName}-#{$shade} {
        stroke: #{$value} !important;
      }
    }
  }
}

// Generate utility classes for basic colors
@mixin generateBasicColorClasses($colors) {
  @each $name, $value in $colors {
    .bg-#{$name} {
      background-color: #{$value} !important;
    }

    .text-#{$name} {
      color: #{$value} !important;
    }

    .decoration-#{$name} {
      text-decoration-color: #{$value} !important;
    }

    .border-#{$name} {
      border-color: #{$value} !important;
    }

    .outline-#{$name} {
      outline-color: #{$value} !important;
    }

    .accent-#{$name} {
      accent-color: #{$value} !important;
    }

    .caret-#{$name} {
      caret-color: #{$value} !important;
    }

    .fill-#{$name} {
      fill: #{$value} !important;
    }

    .stroke-#{$name} {
      stroke: #{$value} !important;
    }
  }
}

// Generate utility classes for link colors
@mixin generateLinkColors($colors) {
  @each $colorName, $values in $colors {
    .link-#{$colorName} {
      color: map.get($values, 400) !important;

      &:hover {
        color: map.get($values, 500) !important;
      }
    }
  }
}

// Generate utility classes for button
@mixin generateButtonColors($colors, $grayWhiteColors: null) {
  @each $colorName, $values in $colors {
    .button-#{$colorName} {
      background-color: map.get($values, 400) !important;
      color: if(lightness(map.get($values, 400)) > 50%, #121212, #fcfcfc);

      &:hover {
        background-color: map.get($values, 500) !important;
      }
    }

    .button-#{$colorName}.outlined {
      background-color: transparent !important;
      color: map.get($values, 400) !important;
      border: solid map.get($values, 400) 2px !important;
      font-weight: bold;
      transition: color ease-in-out 200ms, border ease-in 200ms !important;

      &:hover {
        border-color: map.get($values, 500) !important;
        color: map.get($values, 500) !important;
      }
    }
  }

  @if $grayWhiteColors != null {
    @each $colorName, $values in $grayWhiteColors {
      .button-#{$colorName} {
        background-color: map.get($values, base) !important;
        color: if(lightness(map.get($values, base)) > 50%, #121212, #fcfcfc);

        &:hover {
          background-color: map.get($values, hover) !important;
        }
      }

      .button-#{$colorName}.outlined {
        background-color: transparent !important;
        color: map.get($values, base) !important;
        border: solid map.get($values, base) 2px !important;
        font-weight: bold;
        transition: color ease-in-out 200ms, border ease-in 200ms !important;

        &:hover {
          border-color: map.get($values, hover) !important;
          color: map.get($values, hover) !important;
        }
      }
    }
  }
}
